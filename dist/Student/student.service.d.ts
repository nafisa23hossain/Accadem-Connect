import { PasswordChangeStudentDto, StudentDto } from './dto/Student.dto';
import { StudentLoginDto } from './dto/StudentLogin.dto';
import { PostDto } from '../Post/dto/post.dto';
import { ForgetPassStudentDto, UpdateStudentDto } from './dto/updateStudent.dto';
import { Student } from 'src/Db/student.entity';
import { Repository } from 'typeorm';
import { Post } from 'src/Db/post.entity';
import { UpdatePostDto } from 'src/Post/dto/updatePost.dto';
import { CommentDto } from 'src/Comment/dto/comment.dto';
import { Comment } from 'src/Db/comment.entity';
import { Hr } from 'src/Db/hiring.entity';
import { ReportDto } from 'src/Report/dto/report.dto';
import { Report } from 'src/Db/report.entity';
import { StudentHr } from 'src/Db/student_hr.entity';
import { Token } from 'src/Db/token.entity';
import { MailerService } from '@nestjs-modules/mailer';
import { StudentProfile } from 'src/Db/studentProfile.entity';
import { Job } from 'src/Db/job.entity';
export declare class StudentService {
    private studentRepo;
    private postRepo;
    private commentRepo;
    private hrRepo;
    private reportRepo;
    private studentProfileRepo;
    private studentHrRepo;
    private tokenRepo;
    private mailService;
    private jobRepo;
    getAllJob(email: string): Promise<any>;
    constructor(studentRepo: Repository<Student>, postRepo: Repository<Post>, commentRepo: Repository<Comment>, hrRepo: Repository<Hr>, reportRepo: Repository<Report>, studentProfileRepo: Repository<StudentProfile>, studentHrRepo: Repository<StudentHr>, tokenRepo: Repository<Token>, mailService: MailerService, jobRepo: Repository<Job>);
    deleteStudent(email: string): Promise<any>;
    getNetwork(email: string): Promise<any>;
    addApply(id: number, email: string): Promise<import("typeorm").UpdateResult>;
    addReport(data: ReportDto, email: string): Promise<ReportDto & Report>;
    createNetwork(id: number, email: string): Promise<{
        student: Student;
        hr: Hr;
    } & StudentHr>;
    getReplyComment(id: number, email: string): Promise<any>;
    addReplyComment(id: number, data: CommentDto, email: string): Promise<any>;
    deleteComment(id: number, email: string): Promise<any>;
    getPostComment(id: number, email: string): Promise<any>;
    addComment(id: number, data: CommentDto, email: string): Promise<any>;
    getDetailsPost(id: number, email: any): Promise<any>;
    getAllPost(email: string): Promise<Post[]>;
    deletePostByStudentId(id: number, email: string): Promise<any>;
    getMyPost(email: string): Promise<any>;
    updatePost(id: number, data: UpdatePostDto, email: string): Promise<any>;
    passwordChange(changedPass: PasswordChangeStudentDto, email: string): Promise<any>;
    addPost(data: PostDto, email: string): Promise<any>;
    editProfile(student: UpdateStudentDto, email: string): Promise<any>;
    myProfile(email: string): Promise<StudentProfile>;
    loginStudent(student: StudentLoginDto): Promise<any>;
    addStudent(student: StudentDto): Promise<any>;
    getImages(res: any, email: string): Promise<void>;
    ForgetPassword(email: string): Promise<void>;
    newPassword(data: ForgetPassStudentDto): Promise<import("typeorm").UpdateResult>;
    getMyLetter(email: string): Promise<any>;
}
