import { StudentDto } from 'src/Student/dto/Student.dto';
import { AdminLoginDto } from './dto/adminLogin.dto';
import { ModeratorDto } from 'src/Moderator/dto/Moderator.dto';
import { UpdateAdminDTO } from './dto/updateAdmin.dto';
import { UpdateModeratorDto } from 'src/Moderator/dto/updateModerator.dto';
import { HrDto } from 'src/Hiring-Manager/dto/hr.dto';
import { UpdateHrDto } from 'src/Hiring-Manager/dto/updatehr.dto';
import { ModeratorAccessDto } from 'src/Moderator/dto/moderatorAccess.dto';
import { UpdateStudentDto } from 'src/Student/dto/updateStudent.dto';
import { Moderator } from 'src/Db/moderator.entity';
import { Repository } from 'typeorm';
import { Admin } from 'src/Db/admin.entity';
import { Student } from 'src/Db/student.entity';
import { Hr } from 'src/Db/hiring.entity';
import { ForgetPassAdminDto, PasswordChangeAdminDto } from './dto/changePassAdmin.dto';
import { AdminProfile } from 'src/Db/adminProfile.entity';
import { MailerService } from '@nestjs-modules/mailer';
import { Token } from 'src/Db/token.entity';
import { HrProfile } from 'src/Db/hrProfile.entity';
import { StudentProfile } from 'src/Db/studentProfile.entity';
import { ModeratorProfile } from 'src/Db/moderatorProfile.dto';
export declare class AdminService {
    private adminRepo;
    private moderatorRepo;
    private studentRepo;
    private hrRepo;
    private adminProfileRepo;
    private tokenRepo;
    private hrProfileRepo;
    private studentProfileRepo;
    private moderatorProfileRepo;
    private mailService;
    constructor(adminRepo: Repository<Admin>, moderatorRepo: Repository<Moderator>, studentRepo: Repository<Student>, hrRepo: Repository<Hr>, adminProfileRepo: Repository<AdminProfile>, tokenRepo: Repository<Token>, hrProfileRepo: Repository<HrProfile>, studentProfileRepo: Repository<StudentProfile>, moderatorProfileRepo: Repository<ModeratorProfile>, mailService: MailerService);
    changePassword(changedPass: PasswordChangeAdminDto, email: string): Promise<any>;
    getStudentByAdminId(email: string): Promise<Admin[]>;
    adminProfile(email: string): Promise<any>;
    accessControl(id: number, access: ModeratorAccessDto, email: string): Promise<any>;
    deleteHr(id: number, email: string): Promise<any>;
    updateHr(id: number, hr: UpdateHrDto, email: string): Promise<any>;
    getHrById(id: number, email: string): Promise<any>;
    getAllHr(email: string): Promise<any>;
    addHr(hr: HrDto, email: string): Promise<any>;
    deleteStudent(id: number, email: string): Promise<any>;
    getModeratorByAdminId(email: any): Promise<any>;
    getModeratorById(id: number, email: string): Promise<any>;
    getAllModerator(email: string): Promise<Moderator[]>;
    addModerator(moderator: ModeratorDto, email: string): Promise<Moderator>;
    getAllStudent(): Promise<Student[]>;
    updateStudent(id: number, student: UpdateStudentDto, email: string): Promise<any>;
    getStudentById(id: number, email: string): Promise<Student>;
    addStudent(student: StudentDto, email: string): Promise<any>;
    updateAdmin(email: string, admin: UpdateAdminDTO): Promise<any>;
    adminLogin(admin: AdminLoginDto): Promise<any>;
    deleteModeratorByAdminId(id: number, email: string): Promise<any>;
    updateModeratorByAdminId(id: number, moderator: UpdateModeratorDto, email: string): Promise<any>;
    getHrWithAdmin(email: any): Promise<any>;
    getImages(res: any, email: string): Promise<void>;
    ForgetPassword(email: string): Promise<void>;
    newPassword(data: ForgetPassAdminDto): Promise<import("typeorm").UpdateResult>;
}
